plugins {
    id("java-library")
    id("checkstyle")
    id("maven-publish")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(libs.awaitility)
    testImplementation(libs.awaitility.proxy)
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

checkstyle {
    toolVersion '8.40'
    maxWarnings = 0
    ignoreFailures false
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/farmando/bloomify")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "com.fabiano.bloom"
            artifactId = "bloomify"
            version = project.version
            from(components.java)
        }
    }
}

tasks.register('showCurrentVersion') {
    def currentVersion = project.findProperty('version')
    println 'version: ' + currentVersion
}

def increaseVersion(String versionSuffix) {
    def stableVersion = project.findProperty('version') as String
    println "Increasing ${versionSuffix} Version for ${stableVersion}"
    if (stableVersion.indexOf('-SNAPSHOT') > 0) {
        throw new GradleException("Cannot increase version to a non SNAPSHOT version: ${stableVersion}")
    } else {
        def (major, minor, patch) = stableVersion.tokenize('.')
        switch (versionSuffix) {
            case 'Patch':
                patch = String.valueOf(patch.toInteger() + 1)
                break
            case 'Minor':
                minor = String.valueOf(minor.toInteger() + 1)
                patch = '0'
                break
            case 'Major':
                int majorValue = Integer.valueOf(major.substring(1))
                major = 'v' + String.valueOf(majorValue + 1)
                minor = '0'
                patch = '0'
                break
            default:
                throw new GradleException("Invalid version suffix: ${versionSuffix}")
        }
        String snapshotVersion = major + '.' + minor + '.' + patch + '-SNAPSHOT'
        def gradleProperties = project.property('gradle')
        exec {
            executable = 'sed'
            args = ['-i', "s/${gradleProperties.version}/${snapshotVersion}/g", "${System.getProperty("user.home")}/.gradle/gradle.properties"]
        }
    }
}

tasks.register('increasePatchVersion') {
    doFirst {
        increaseVersion('Patch')
    }
}

tasks.register('increaseMinorVersion') {
    doFirst {
        increaseVersion('Minor')
    }
}

tasks.register('increaseMajorVersion') {
    doFirst {
        increaseVersion('Major')
    }
}

tasks.register('releaseNewVersion') {
    doFirst {
        def snapshotVersion = project.findProperty('version') as String
        println "Releasing for ${snapshotVersion}"
        if (snapshotVersion.indexOf('-SNAPSHOT') > 0) {
            def stableProjectVersion = snapshotVersion - '-SNAPSHOT'
            def gradleProperties = project.property('gradle')
            exec {
                executable = 'sed'
                args = ['-i', "s/${gradleProperties.version}/${stableProjectVersion}/g", "${System.getProperty("user.home")}/.gradle/gradle.properties"]
            }
        } else {
            throw new GradleException("Cannot release a non SNAPSHOT version: ${snapshotVersion}")
        }
    }
}
